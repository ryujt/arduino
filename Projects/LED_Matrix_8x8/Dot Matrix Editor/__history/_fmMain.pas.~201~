unit _fmMain;

interface

uses
  Strg,
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Menus;

const
  MATRIX_WIDTH  = 8;
  MATRIX_HEIGHT = 8;
  MATRIX_SIZE    = MATRIX_WIDTH * MATRIX_HEIGHT;

type
  TNewShape = class (TShape)
  private
    procedure on_Click(Sender:TObject);
    procedure on_DblClick(Sender:TObject);
    procedure on_MouseEnter(Sender:TObject);
  public
    constructor Create(AOwner: TComponent); override;

    procedure SetOn;
    procedure SetOff;
    procedure SetToggle;
  end;

  TShape = class (TNewShape);

  TDrawingMode = (dmNone, dmDraw, dmErase);

  TfmMain = class(TForm)
    Panel1: TPanel;
    plMatrix: TPanel;
    btAdd: TButton;
    btOn: TButton;
    btOff: TButton;
    btTurnRight: TButton;
    plLeft: TPanel;
    Shape1: TShape;
    Shape10: TShape;
    Shape11: TShape;
    Shape12: TShape;
    Shape13: TShape;
    Shape14: TShape;
    Shape15: TShape;
    Shape16: TShape;
    Shape17: TShape;
    Shape18: TShape;
    Shape19: TShape;
    Shape2: TShape;
    Shape20: TShape;
    Shape21: TShape;
    Shape22: TShape;
    Shape23: TShape;
    Shape24: TShape;
    Shape25: TShape;
    Shape26: TShape;
    Shape27: TShape;
    Shape28: TShape;
    Shape29: TShape;
    Shape3: TShape;
    Shape30: TShape;
    Shape31: TShape;
    Shape32: TShape;
    Shape33: TShape;
    Shape34: TShape;
    Shape35: TShape;
    Shape36: TShape;
    Shape37: TShape;
    Shape38: TShape;
    Shape39: TShape;
    Shape4: TShape;
    Shape40: TShape;
    Shape41: TShape;
    Shape42: TShape;
    Shape43: TShape;
    Shape44: TShape;
    Shape45: TShape;
    Shape46: TShape;
    Shape47: TShape;
    Shape48: TShape;
    Shape49: TShape;
    Shape5: TShape;
    Shape50: TShape;
    Shape51: TShape;
    Shape52: TShape;
    Shape53: TShape;
    Shape54: TShape;
    Shape55: TShape;
    Shape56: TShape;
    Shape57: TShape;
    Shape58: TShape;
    Shape59: TShape;
    Shape6: TShape;
    Shape60: TShape;
    Shape61: TShape;
    Shape62: TShape;
    Shape63: TShape;
    Shape64: TShape;
    Shape7: TShape;
    Shape8: TShape;
    Shape9: TShape;
    ListBox: TListBox;
    moLines: TMemo;
    btPlay: TButton;
    MainMenu: TMainMenu;
    File1: TMenuItem;
    miOpen: TMenuItem;
    miSave: TMenuItem;
    N1: TMenuItem;
    miExit: TMenuItem;
    OpenDialog: TOpenDialog;
    SaveDialog: TSaveDialog;
    PopupMenu: TPopupMenu;
    miDelete: TMenuItem;
    miInsert: TMenuItem;
    btUpdate: TButton;
    btInsert: TButton;
    miUpdate: TMenuItem;
    btClear: TButton;
    Timer: TTimer;
    procedure FormCreate(Sender: TObject);
    procedure btAddClick(Sender: TObject);
    procedure btOnClick(Sender: TObject);
    procedure btOffClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btTurnRightClick(Sender: TObject);
    procedure ListBoxDblClick(Sender: TObject);
    procedure btPlayClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure miOpenClick(Sender: TObject);
    procedure miSaveClick(Sender: TObject);
    procedure miExitClick(Sender: TObject);
    procedure miDeleteClick(Sender: TObject);
    procedure miUpdateClick(Sender: TObject);
    procedure btInsertClick(Sender: TObject);
    procedure btUpdateClick(Sender: TObject);
    procedure miInsertClick(Sender: TObject);
    procedure btClearClick(Sender: TObject);
    procedure TimerTimer(Sender: TObject);
  private
    FAnimationIndex : integer;
    FIsFormClosing : boolean;
    FLEDs : array [0.. MATRIX_WIDTH-1, 0..MATRIX_HEIGHT-1] of TShape;
    procedure init_LED_Positions;
    procedure clear_LED;
    procedure do_Add;
    procedure do_Delete;
    procedure do_Insert;
    procedure do_Update;
    procedure do_SelectListBox(AIndex:integer);
  private
    FDrawingMode: TDrawingMode;
    procedure SetDrawingMode(const Value: TDrawingMode);
  public
    property DrawingMode : TDrawingMode read FDrawingMode write SetDrawingMode;
  end;

var
  fmMain: TfmMain;

implementation

{$R *.dfm}

{ TNewShape }

constructor TNewShape.Create(AOwner: TComponent);
begin
  inherited;

  SetOff;

  OnClick := on_Click;
  OnDblClick := on_DblClick;
  OnMouseEnter := on_MouseEnter;
end;

procedure TNewShape.on_Click(Sender: TObject);
begin
  SetToggle;
end;

procedure TNewShape.on_DblClick(Sender: TObject);
begin
  SetToggle;
end;

procedure TNewShape.on_MouseEnter(Sender: TObject);
begin
  case fmMain.DrawingMode of
    dmDraw: SetOn;
    dmErase: SetOff;
  end;
end;

procedure TNewShape.SetOff;
begin
  Brush.Color := clSilver;
end;

procedure TNewShape.SetOn;
begin
  Brush.Color := clRed;
end;

procedure TNewShape.SetToggle;
begin
  if Brush.Color = clRed then Brush.Color := clSilver
  else Brush.Color := clRed;
end;

{ TfmMain }

procedure SetBit(var AValue:byte; AIndex:integer; AOn:boolean);
var
  iValue : byte;
begin
  iValue := 1 shl (8-AIndex-1);

  if AOn then begin
    AValue := AValue or iValue;
  end else begin
    iValue := not iValue;
    AValue := AValue and iValue;
  end;
end;

procedure TfmMain.do_Add;
var
  iValue : byte;
  X, Y : integer;
  sLine : string;
begin
  sLine := '';

  for Y := 0 to MATRIX_HEIGHT-1 do begin
    iValue := 0;

    for X := 0 to MATRIX_WIDTH -1 do
      SetBit( iValue, X, FLEDs[X,Y].Brush.Color = clRed );

    sLine := sLine + Format( '0x%s, ', [IntToHex(iValue, 2)] );
  end;

  SetLength(sLine, Length(sLine)-2);

  ListBox.Items.Add( '{ ' + sLine + ' },' );
  moLines.Lines.Text := ListBox.Items.Text;
end;

procedure TfmMain.do_Delete;
begin
  if ListBox.ItemIndex > -1 then ListBox.Items.Delete(ListBox.ItemIndex);
end;

procedure TfmMain.do_Insert;
var
  iValue : byte;
  X, Y : integer;
  sLine : string;
begin
  if ListBox.ItemIndex = -1 then begin
    do_Add;
    Exit;
  end;

  sLine := '';

  for Y := 0 to MATRIX_HEIGHT-1 do begin
    iValue := 0;

    for X := 0 to MATRIX_WIDTH -1 do
      SetBit( iValue, X, FLEDs[X,Y].Brush.Color = clRed );

    sLine := sLine + Format( '0x%s, ', [IntToHex(iValue, 2)] );
  end;

  SetLength(sLine, Length(sLine)-2);

  ListBox.Items.Insert( ListBox.ItemIndex, '{ ' + sLine + ' },' );
  moLines.Lines.Text := ListBox.Items.Text;
end;

procedure TfmMain.btAddClick(Sender: TObject);
begin
  do_Add;
end;

procedure TfmMain.btClearClick(Sender: TObject);
begin
  clear_LED;

  ListBox.Items.Clear;
  moLines.Clear;
end;

procedure TfmMain.btInsertClick(Sender: TObject);
begin
  do_Insert;
end;

procedure TfmMain.btOffClick(Sender: TObject);
begin
  clear_LED;
end;

procedure TfmMain.btOnClick(Sender: TObject);
var
  X, Y : integer;
begin
  for Y := 0 to MATRIX_HEIGHT-1 do
  for X := 0 to MATRIX_WIDTH -1 do FLEDs[X,Y].SetOn;
end;

procedure Delay(ATime:integer);
var
  TickStart, Tick : Cardinal;
begin
  TickStart := GetTickCount;
  Tick      := GetTickCount;

  while ((Tick - TickStart) < (ATime)) do begin
    Application.ProcessMessages;
    Tick := GetTickCount;

    if TickStart > Tick then Break;
  end;
end;

procedure TfmMain.btPlayClick(Sender: TObject);
begin
  if Timer.Enabled then begin
    Timer.Enabled := false;
  end else begin
    clear_LED;
    Timer.Enabled := true;
  end;
end;

procedure TfmMain.btTurnRightClick(Sender: TObject);
begin
  // TODO: 오른쪽으로 90도 회전
end;

procedure TfmMain.btUpdateClick(Sender: TObject);
begin
  do_Update;
end;

procedure TfmMain.clear_LED;
var
  X, Y : integer;
begin
  for Y := 0 to MATRIX_HEIGHT-1 do
  for X := 0 to MATRIX_WIDTH -1 do FLEDs[X,Y].SetOff;
end;

function BitOn(AValue,AIndex:byte):boolean;
var
  iMask : byte;
begin
  iMask := 1;
  iMask := iMask shl (8 - AIndex - 1);

  Result := (AValue and iMask) = iMask;
end;

procedure TfmMain.do_SelectListBox(AIndex: integer);
var
  iValue : byte;
  sLine : string;
  Lines : TStringList;
  X, Y: Integer;
begin
  if AIndex = -1 then Exit;

  Lines := TStringList.Create;
  try
    Lines.Delimiter := ',';
    Lines.DelimitedText := Strg.MiddleStr( ListBox.Items[AIndex], '{', '}' );

    for Y := 0 to Lines.Count-1 do begin
      sLine := Trim(Lines[Y]);
      sLine := StringReplace( sLine, '0x', '$', [] );

      iValue := StrToInt( sLine );

      for X := 0 to MATRIX_WIDTH-1 do if BitOn(iValue, X) then FLEDs[X, Y].SetOn
      else FLEDs[X, Y].SetOff;
    end;
  finally
    Lines.Free;
  end;
end;

procedure TfmMain.do_Update;
var
  iValue : byte;
  X, Y : integer;
  sLine : string;
begin
  if ListBox.ItemIndex = -1 then Exit;

  sLine := '';

  for Y := 0 to MATRIX_HEIGHT-1 do begin
    iValue := 0;

    for X := 0 to MATRIX_WIDTH -1 do
      SetBit( iValue, X, FLEDs[X,Y].Brush.Color = clRed );

    sLine := sLine + Format( '0x%s, ', [IntToHex(iValue, 2)] );
  end;

  SetLength(sLine, Length(sLine)-2);

  ListBox.Items[ListBox.ItemIndex] := '{ ' + sLine + ' },';
  moLines.Lines.Text := ListBox.Items.Text;
end;

procedure TfmMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FIsFormClosing := true;
end;

procedure TfmMain.FormCreate(Sender: TObject);
begin
  FIsFormClosing := false;
  FDrawingMode := dmNone;

  init_LED_Positions;
end;

procedure TfmMain.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Shift = [ssCtrl] then DrawingMode := dmDraw
  else if Shift = [ssShift] then DrawingMode := dmErase
  else DrawingMode := dmNone;
end;

procedure TfmMain.FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  DrawingMode := dmNone;
end;

procedure TfmMain.init_LED_Positions;
const
  LEFT_MARGIN = 16;
  TOP_MARGIN  = 16;
var
  Loop: Integer;
begin
  for Loop := 0 to MATRIX_SIZE-1 do begin
    FLEDs[Loop mod MATRIX_WIDTH, Loop div MATRIX_WIDTH] := Pointer( FindComponent('Shape' + IntToStr(Loop+1)) );

    FLEDs[Loop mod MATRIX_WIDTH, Loop div MATRIX_WIDTH].Left := LEFT_MARGIN + (Loop mod MATRIX_WIDTH) * 22;
    FLEDs[Loop mod MATRIX_WIDTH, Loop div MATRIX_WIDTH].Top  := TOP_MARGIN  + (Loop div MATRIX_WIDTH) * 22;
  end;
end;

procedure TfmMain.ListBoxDblClick(Sender: TObject);
begin
  do_SelectListBox( ListBox.ItemIndex );
end;

procedure TfmMain.miDeleteClick(Sender: TObject);
begin
  do_Delete;
end;

procedure TfmMain.miExitClick(Sender: TObject);
begin
  Close;
end;

procedure TfmMain.miInsertClick(Sender: TObject);
begin
  do_Insert;
end;

procedure TfmMain.miOpenClick(Sender: TObject);
begin
  if OpenDialog.Execute then begin
    ListBox.Items.LoadFromFile( OpenDialog.FileName );
    moLines.Text := ListBox.Items.Text;
  end;
end;

procedure TfmMain.miSaveClick(Sender: TObject);
begin
  if SaveDialog.Execute then
    ListBox.Items.SaveToFile( SaveDialog.FileName );
end;

procedure TfmMain.miUpdateClick(Sender: TObject);
begin
  do_Update;
end;

procedure TfmMain.SetDrawingMode(const Value: TDrawingMode);
begin
  FDrawingMode := Value;

  case Value of
    dmNone: Caption := 'Dot Matrix Generator';
    dmDraw: Caption := 'Dot Matrix Generator - 그리기 모드';
    dmErase: Caption := 'Dot Matrix Generator - 지우기 모드';
  end;
end;

procedure TfmMain.TimerTimer(Sender: TObject);
begin
  iIndex := 0;

  while True do begin
    do_SelectListBox( iIndex );

    iIndex := iIndex + 1;
    if iIndex >= ListBox.Items.Count then iIndex := 0;

    Delay(500);

    if fmMain.FIsFormClosing then Break;
  end;
end;

end.
